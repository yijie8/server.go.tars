// Package Zserver comment
// This file was generated by tars2go 1.1
// Generated from WebApiAuth.tars
package Zserver

import (
	"context"
	"fmt"
	"unsafe"

	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8
var _ = unsafe.Pointer(nil)

//WebApiAuth struct
type WebApiAuth struct {
	s m.Servant
}

//SysConfig_Create is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_Create(Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_Create", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_CreateWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_CreateWithContext(ctx context.Context, Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_Create", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_CreateOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_CreateOneWayWithContext(ctx context.Context, Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "SysConfig_Create", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_Get is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_Get(Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_Get", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_GetWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_GetWithContext(ctx context.Context, Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_Get", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_GetOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_GetOneWayWithContext(ctx context.Context, Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "SysConfig_Get", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_GetPage is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_GetPage(PageSize int32, PageIndex int32, Req *SysConfig, Res *SysConfig_List, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(PageSize, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(PageIndex, 2)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_GetPage", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 4, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_GetPageWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_GetPageWithContext(ctx context.Context, PageSize int32, PageIndex int32, Req *SysConfig, Res *SysConfig_List, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(PageSize, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(PageIndex, 2)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_GetPage", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 4, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_GetPageOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_GetPageOneWayWithContext(ctx context.Context, PageSize int32, PageIndex int32, Req *SysConfig, Res *SysConfig_List, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(PageSize, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(PageIndex, 2)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "SysConfig_GetPage", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_Update is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_Update(Id int32, Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Id, 1)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_Update", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 3, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_UpdateWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_UpdateWithContext(ctx context.Context, Id int32, Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Id, 1)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_Update", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 3, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_UpdateOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_UpdateOneWayWithContext(ctx context.Context, Id int32, Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Id, 1)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "SysConfig_Update", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_Delete is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_Delete(Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_Delete", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_DeleteWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_DeleteWithContext(ctx context.Context, Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_Delete", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_DeleteOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_DeleteOneWayWithContext(ctx context.Context, Req *SysConfig, Res *SysConfig, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "SysConfig_Delete", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_BatchDelete is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_BatchDelete(Id []int32, Req *SysConfig, Res *bool, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(Id)), 0)
	if err != nil {
		return err
	}

	for _, v := range Id {

		err = _os.Write_int32(v, 0)
		if err != nil {
			return err
		}

	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = _os.Write_bool((*Res), 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_BatchDelete", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&(*Res), 3, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_BatchDeleteWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_BatchDeleteWithContext(ctx context.Context, Id []int32, Req *SysConfig, Res *bool, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(Id)), 0)
	if err != nil {
		return err
	}

	for _, v := range Id {

		err = _os.Write_int32(v, 0)
		if err != nil {
			return err
		}

	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = _os.Write_bool((*Res), 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "SysConfig_BatchDelete", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&(*Res), 3, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SysConfig_BatchDeleteOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) SysConfig_BatchDeleteOneWayWithContext(ctx context.Context, Id []int32, Req *SysConfig, Res *bool, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(Id)), 0)
	if err != nil {
		return err
	}

	for _, v := range Id {

		err = _os.Write_int32(v, 0)
		if err != nil {
			return err
		}

	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = _os.Write_bool((*Res), 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "SysConfig_BatchDelete", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_Get is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_Get(Req *LoginLog, Res *LoginLog, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "LoginLog_Get", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_GetWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_GetWithContext(ctx context.Context, Req *LoginLog, Res *LoginLog, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "LoginLog_Get", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_GetOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_GetOneWayWithContext(ctx context.Context, Req *LoginLog, Res *LoginLog, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "LoginLog_Get", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_GetPage is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_GetPage(PageSize int32, PageIndex int32, Req *LoginLog, Res *LoginLog_List, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(PageSize, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(PageIndex, 2)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "LoginLog_GetPage", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 4, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_GetPageWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_GetPageWithContext(ctx context.Context, PageSize int32, PageIndex int32, Req *LoginLog, Res *LoginLog_List, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(PageSize, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(PageIndex, 2)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "LoginLog_GetPage", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 4, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_GetPageOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_GetPageOneWayWithContext(ctx context.Context, PageSize int32, PageIndex int32, Req *LoginLog, Res *LoginLog_List, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(PageSize, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(PageIndex, 2)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "LoginLog_GetPage", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_Create is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_Create(Req *LoginLog, Res *LoginLog, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "LoginLog_Create", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_CreateWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_CreateWithContext(ctx context.Context, Req *LoginLog, Res *LoginLog, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "LoginLog_Create", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_CreateOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_CreateOneWayWithContext(ctx context.Context, Req *LoginLog, Res *LoginLog, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "LoginLog_Create", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_Update is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_Update(Id int32, Req *LoginLog, Res *LoginLog, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Id, 1)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "LoginLog_Update", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 3, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_UpdateWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_UpdateWithContext(ctx context.Context, Id int32, Req *LoginLog, Res *LoginLog, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Id, 1)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "LoginLog_Update", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*Res).ReadBlock(_is, 3, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_UpdateOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_UpdateOneWayWithContext(ctx context.Context, Id int32, Req *LoginLog, Res *LoginLog, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Id, 1)
	if err != nil {
		return err
	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = (*Res).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "LoginLog_Update", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_BatchDelete is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_BatchDelete(Id []int32, Req *LoginLog, Res *bool, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(Id)), 0)
	if err != nil {
		return err
	}

	for _, v := range Id {

		err = _os.Write_int32(v, 0)
		if err != nil {
			return err
		}

	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = _os.Write_bool((*Res), 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()

	err = _obj.s.Tars_invoke(ctx, 0, "LoginLog_BatchDelete", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&(*Res), 3, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_BatchDeleteWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_BatchDeleteWithContext(ctx context.Context, Id []int32, Req *LoginLog, Res *bool, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(Id)), 0)
	if err != nil {
		return err
	}

	for _, v := range Id {

		err = _os.Write_int32(v, 0)
		if err != nil {
			return err
		}

	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = _os.Write_bool((*Res), 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 0, "LoginLog_BatchDelete", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_bool(&(*Res), 3, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoginLog_BatchDeleteOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiAuth) LoginLog_BatchDeleteOneWayWithContext(ctx context.Context, Id []int32, Req *LoginLog, Res *bool, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(Id)), 0)
	if err != nil {
		return err
	}

	for _, v := range Id {

		err = _os.Write_int32(v, 0)
		if err != nil {
			return err
		}

	}

	err = Req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = _os.Write_bool((*Res), 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(ctx, 1, "LoginLog_BatchDelete", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SetServant sets servant for the service.
func (_obj *WebApiAuth) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *WebApiAuth) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol sets the protocol for the servant.
func (_obj *WebApiAuth) TarsSetProtocol(p m.Protocol) {
	_obj.s.TarsSetProtocol(p)
}

//AddServant adds servant  for the service.
func (_obj *WebApiAuth) AddServant(imp _impWebApiAuth, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *WebApiAuth) AddServantWithContext(imp _impWebApiAuthWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impWebApiAuth interface {
	SysConfig_Create(Req *SysConfig, Res *SysConfig) (err error)
	SysConfig_Get(Req *SysConfig, Res *SysConfig) (err error)
	SysConfig_GetPage(PageSize int32, PageIndex int32, Req *SysConfig, Res *SysConfig_List) (err error)
	SysConfig_Update(Id int32, Req *SysConfig, Res *SysConfig) (err error)
	SysConfig_Delete(Req *SysConfig, Res *SysConfig) (err error)
	SysConfig_BatchDelete(Id []int32, Req *SysConfig, Res *bool) (err error)
	LoginLog_Get(Req *LoginLog, Res *LoginLog) (err error)
	LoginLog_GetPage(PageSize int32, PageIndex int32, Req *LoginLog, Res *LoginLog_List) (err error)
	LoginLog_Create(Req *LoginLog, Res *LoginLog) (err error)
	LoginLog_Update(Id int32, Req *LoginLog, Res *LoginLog) (err error)
	LoginLog_BatchDelete(Id []int32, Req *LoginLog, Res *bool) (err error)
}
type _impWebApiAuthWithContext interface {
	SysConfig_Create(ctx context.Context, Req *SysConfig, Res *SysConfig) (err error)
	SysConfig_Get(ctx context.Context, Req *SysConfig, Res *SysConfig) (err error)
	SysConfig_GetPage(ctx context.Context, PageSize int32, PageIndex int32, Req *SysConfig, Res *SysConfig_List) (err error)
	SysConfig_Update(ctx context.Context, Id int32, Req *SysConfig, Res *SysConfig) (err error)
	SysConfig_Delete(ctx context.Context, Req *SysConfig, Res *SysConfig) (err error)
	SysConfig_BatchDelete(ctx context.Context, Id []int32, Req *SysConfig, Res *bool) (err error)
	LoginLog_Get(ctx context.Context, Req *LoginLog, Res *LoginLog) (err error)
	LoginLog_GetPage(ctx context.Context, PageSize int32, PageIndex int32, Req *LoginLog, Res *LoginLog_List) (err error)
	LoginLog_Create(ctx context.Context, Req *LoginLog, Res *LoginLog) (err error)
	LoginLog_Update(ctx context.Context, Id int32, Req *LoginLog, Res *LoginLog) (err error)
	LoginLog_BatchDelete(ctx context.Context, Id []int32, Req *LoginLog, Res *bool) (err error)
}

// Dispatch is used to call the server side implemnet for the method defined in the tars file. withContext shows using context or not.
func (_obj *WebApiAuth) Dispatch(ctx context.Context, _val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	switch req.SFuncName {
	case "SysConfig_Create":
		var Req SysConfig
		err = Req.ReadBlock(_is, 1, true)
		if err != nil {
			return err
		}

		var Res SysConfig
		err = Res.ReadBlock(_is, 2, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.SysConfig_Create(&Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.SysConfig_Create(ctx, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = Res.WriteBlock(_os, 2)
		if err != nil {
			return err
		}

	case "SysConfig_Get":
		var Req SysConfig
		err = Req.ReadBlock(_is, 1, true)
		if err != nil {
			return err
		}

		var Res SysConfig
		err = Res.ReadBlock(_is, 2, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.SysConfig_Get(&Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.SysConfig_Get(ctx, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = Res.WriteBlock(_os, 2)
		if err != nil {
			return err
		}

	case "SysConfig_GetPage":
		var PageSize int32
		err = _is.Read_int32(&PageSize, 1, true)
		if err != nil {
			return err
		}

		var PageIndex int32
		err = _is.Read_int32(&PageIndex, 2, true)
		if err != nil {
			return err
		}

		var Req SysConfig
		err = Req.ReadBlock(_is, 3, true)
		if err != nil {
			return err
		}

		var Res SysConfig_List
		err = Res.ReadBlock(_is, 4, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.SysConfig_GetPage(PageSize, PageIndex, &Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.SysConfig_GetPage(ctx, PageSize, PageIndex, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = Res.WriteBlock(_os, 4)
		if err != nil {
			return err
		}

	case "SysConfig_Update":
		var Id int32
		err = _is.Read_int32(&Id, 1, true)
		if err != nil {
			return err
		}

		var Req SysConfig
		err = Req.ReadBlock(_is, 2, true)
		if err != nil {
			return err
		}

		var Res SysConfig
		err = Res.ReadBlock(_is, 3, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.SysConfig_Update(Id, &Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.SysConfig_Update(ctx, Id, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = Res.WriteBlock(_os, 3)
		if err != nil {
			return err
		}

	case "SysConfig_Delete":
		var Req SysConfig
		err = Req.ReadBlock(_is, 1, true)
		if err != nil {
			return err
		}

		var Res SysConfig
		err = Res.ReadBlock(_is, 2, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.SysConfig_Delete(&Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.SysConfig_Delete(ctx, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = Res.WriteBlock(_os, 2)
		if err != nil {
			return err
		}

	case "SysConfig_BatchDelete":
		var Id []int32
		err, have, ty = _is.SkipToNoCheck(1, true)
		if err != nil {
			return err
		}

		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			Id = make([]int32, length)
			for i1, e1 := int32(0), length; i1 < e1; i1++ {

				err = _is.Read_int32(&Id[i1], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
		var Req SysConfig
		err = Req.ReadBlock(_is, 2, true)
		if err != nil {
			return err
		}

		var Res bool
		err = _is.Read_bool(&Res, 3, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.SysConfig_BatchDelete(Id, &Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.SysConfig_BatchDelete(ctx, Id, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = _os.Write_bool(Res, 3)
		if err != nil {
			return err
		}

	case "LoginLog_Get":
		var Req LoginLog
		err = Req.ReadBlock(_is, 1, true)
		if err != nil {
			return err
		}

		var Res LoginLog
		err = Res.ReadBlock(_is, 2, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.LoginLog_Get(&Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.LoginLog_Get(ctx, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = Res.WriteBlock(_os, 2)
		if err != nil {
			return err
		}

	case "LoginLog_GetPage":
		var PageSize int32
		err = _is.Read_int32(&PageSize, 1, true)
		if err != nil {
			return err
		}

		var PageIndex int32
		err = _is.Read_int32(&PageIndex, 2, true)
		if err != nil {
			return err
		}

		var Req LoginLog
		err = Req.ReadBlock(_is, 3, true)
		if err != nil {
			return err
		}

		var Res LoginLog_List
		err = Res.ReadBlock(_is, 4, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.LoginLog_GetPage(PageSize, PageIndex, &Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.LoginLog_GetPage(ctx, PageSize, PageIndex, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = Res.WriteBlock(_os, 4)
		if err != nil {
			return err
		}

	case "LoginLog_Create":
		var Req LoginLog
		err = Req.ReadBlock(_is, 1, true)
		if err != nil {
			return err
		}

		var Res LoginLog
		err = Res.ReadBlock(_is, 2, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.LoginLog_Create(&Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.LoginLog_Create(ctx, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = Res.WriteBlock(_os, 2)
		if err != nil {
			return err
		}

	case "LoginLog_Update":
		var Id int32
		err = _is.Read_int32(&Id, 1, true)
		if err != nil {
			return err
		}

		var Req LoginLog
		err = Req.ReadBlock(_is, 2, true)
		if err != nil {
			return err
		}

		var Res LoginLog
		err = Res.ReadBlock(_is, 3, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.LoginLog_Update(Id, &Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.LoginLog_Update(ctx, Id, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = Res.WriteBlock(_os, 3)
		if err != nil {
			return err
		}

	case "LoginLog_BatchDelete":
		var Id []int32
		err, have, ty = _is.SkipToNoCheck(1, true)
		if err != nil {
			return err
		}

		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			Id = make([]int32, length)
			for i2, e2 := int32(0), length; i2 < e2; i2++ {

				err = _is.Read_int32(&Id[i2], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
		var Req LoginLog
		err = Req.ReadBlock(_is, 2, true)
		if err != nil {
			return err
		}

		var Res bool
		err = _is.Read_bool(&Res, 3, false)
		if err != nil {
			return err
		}

		if !withContext {
			_imp := _val.(_impWebApiAuth)
			err = _imp.LoginLog_BatchDelete(Id, &Req, &Res)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impWebApiAuthWithContext)
			err = _imp.LoginLog_BatchDelete(ctx, Id, &Req, &Res)
			if err != nil {
				return err
			}
		}

		err = _os.Write_bool(Res, 3)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}

	_ = _is
	_ = _os
	_ = length
	_ = have
	_ = ty
	return nil
}
