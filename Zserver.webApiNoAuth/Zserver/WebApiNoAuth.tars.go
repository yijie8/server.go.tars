// Package Zserver comment
// This file was generated by tars2go 1.1.4
// Generated from Web.tars
package Zserver

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/basef"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/tup"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8
var _ = unsafe.Pointer(nil)

//WebApiNoAuth struct
type WebApiNoAuth struct {
	s m.Servant
}

//GetSysTables is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetSysTables(tableId string, res *SysTables_one_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(tableId, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetSysTables", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetSysTablesWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetSysTablesWithContext(tarsCtx context.Context, tableId string, res *SysTables_one_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(tableId, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetSysTables", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetSysTablesOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetSysTablesOneWayWithContext(tarsCtx context.Context, tableId string, res *SysTables_one_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(tableId, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "GetSysTables", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//DeleteSysTables is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) DeleteSysTables(tableId string, res *Response_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(tableId, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "DeleteSysTables", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//DeleteSysTablesWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) DeleteSysTablesWithContext(tarsCtx context.Context, tableId string, res *Response_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(tableId, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "DeleteSysTables", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//DeleteSysTablesOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) DeleteSysTablesOneWayWithContext(tarsCtx context.Context, tableId string, res *Response_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(tableId, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "DeleteSysTables", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//UpdateSysTable is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) UpdateSysTable(uid string, req *SysTables_List, res *Response_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(uid, 1)
	if err != nil {
		return err
	}

	err = req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "UpdateSysTable", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 3, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//UpdateSysTableWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) UpdateSysTableWithContext(tarsCtx context.Context, uid string, req *SysTables_List, res *Response_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(uid, 1)
	if err != nil {
		return err
	}

	err = req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "UpdateSysTable", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 3, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//UpdateSysTableOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) UpdateSysTableOneWayWithContext(tarsCtx context.Context, uid string, req *SysTables_List, res *Response_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(uid, 1)
	if err != nil {
		return err
	}

	err = req.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "UpdateSysTable", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//InsertSysTable is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) InsertSysTable(req *InsertSysTable_req, res *Response_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "InsertSysTable", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//InsertSysTableWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) InsertSysTableWithContext(tarsCtx context.Context, req *InsertSysTable_req, res *Response_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "InsertSysTable", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//InsertSysTableOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) InsertSysTableOneWayWithContext(tarsCtx context.Context, req *InsertSysTable_req, res *Response_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "InsertSysTable", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetSysTableList is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetSysTableList(req *Table_req, res *SysTables_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetSysTableList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetSysTableListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetSysTableListWithContext(tarsCtx context.Context, req *Table_req, res *SysTables_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetSysTableList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetSysTableListOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetSysTableListOneWayWithContext(tarsCtx context.Context, req *Table_req, res *SysTables_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "GetSysTableList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetDBColumnList is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetDBColumnList(req *GetDBColumnList_req, res *GetDBColumnList_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetDBColumnList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetDBColumnListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetDBColumnListWithContext(tarsCtx context.Context, req *GetDBColumnList_req, res *GetDBColumnList_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetDBColumnList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetDBColumnListOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetDBColumnListOneWayWithContext(tarsCtx context.Context, req *GetDBColumnList_req, res *GetDBColumnList_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "GetDBColumnList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetDBTableList is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetDBTableList(req *GetDBTableList_req, res *GetDBTableList_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetDBTableList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetDBTableListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetDBTableListWithContext(tarsCtx context.Context, req *GetDBTableList_req, res *GetDBTableList_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetDBTableList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetDBTableListOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetDBTableListOneWayWithContext(tarsCtx context.Context, req *GetDBTableList_req, res *GetDBTableList_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "GetDBTableList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetDictDataByDictType is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetDictDataByDictType(dictType string, res *DictData_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(dictType, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetDictDataByDictType", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetDictDataByDictTypeWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetDictDataByDictTypeWithContext(tarsCtx context.Context, dictType string, res *DictData_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(dictType, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetDictDataByDictType", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetDictDataByDictTypeOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetDictDataByDictTypeOneWayWithContext(tarsCtx context.Context, dictType string, res *DictData_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(dictType, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "GetDictDataByDictType", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//Preview is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) Preview(id int32, res *Preview_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(id, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "Preview", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//PreviewWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) PreviewWithContext(tarsCtx context.Context, id int32, res *Preview_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(id, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "Preview", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//PreviewOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) PreviewOneWayWithContext(tarsCtx context.Context, id int32, res *Preview_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(id, 1)
	if err != nil {
		return err
	}

	err = (*res).WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "Preview", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//MenuTreeselect is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) MenuTreeselect(res *GetMenuTreeelect_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = (*res).WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "MenuTreeselect", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//MenuTreeselectWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) MenuTreeselectWithContext(tarsCtx context.Context, res *GetMenuTreeelect_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = (*res).WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "MenuTreeselect", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//MenuTreeselectOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) MenuTreeselectOneWayWithContext(tarsCtx context.Context, res *GetMenuTreeelect_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = (*res).WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "MenuTreeselect", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//Monitor_server is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) Monitor_server(res *Monitor_server_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = (*res).WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "Monitor_server", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//Monitor_serverWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) Monitor_serverWithContext(tarsCtx context.Context, res *Monitor_server_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = (*res).WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "Monitor_server", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//Monitor_serverOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) Monitor_serverOneWayWithContext(tarsCtx context.Context, res *Monitor_server_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = (*res).WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "Monitor_server", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetCaptcha is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetCaptcha(res *GetCaptcha_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = (*res).WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetCaptcha", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetCaptchaWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetCaptchaWithContext(tarsCtx context.Context, res *GetCaptcha_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = (*res).WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "GetCaptcha", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*res).ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetCaptchaOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *WebApiNoAuth) GetCaptchaOneWayWithContext(tarsCtx context.Context, res *GetCaptcha_res, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = (*res).WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "GetCaptcha", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SetServant sets servant for the service.
func (_obj *WebApiNoAuth) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *WebApiNoAuth) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol sets the protocol for the servant.
func (_obj *WebApiNoAuth) TarsSetProtocol(p m.Protocol) {
	_obj.s.TarsSetProtocol(p)
}

//AddServant adds servant  for the service.
func (_obj *WebApiNoAuth) AddServant(imp _impWebApiNoAuth, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *WebApiNoAuth) AddServantWithContext(imp _impWebApiNoAuthWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impWebApiNoAuth interface {
	GetSysTables(tableId string, res *SysTables_one_res) (err error)
	DeleteSysTables(tableId string, res *Response_res) (err error)
	UpdateSysTable(uid string, req *SysTables_List, res *Response_res) (err error)
	InsertSysTable(req *InsertSysTable_req, res *Response_res) (err error)
	GetSysTableList(req *Table_req, res *SysTables_res) (err error)
	GetDBColumnList(req *GetDBColumnList_req, res *GetDBColumnList_res) (err error)
	GetDBTableList(req *GetDBTableList_req, res *GetDBTableList_res) (err error)
	GetDictDataByDictType(dictType string, res *DictData_res) (err error)
	Preview(id int32, res *Preview_res) (err error)
	MenuTreeselect(res *GetMenuTreeelect_res) (err error)
	Monitor_server(res *Monitor_server_res) (err error)
	GetCaptcha(res *GetCaptcha_res) (err error)
}
type _impWebApiNoAuthWithContext interface {
	GetSysTables(tarsCtx context.Context, tableId string, res *SysTables_one_res) (err error)
	DeleteSysTables(tarsCtx context.Context, tableId string, res *Response_res) (err error)
	UpdateSysTable(tarsCtx context.Context, uid string, req *SysTables_List, res *Response_res) (err error)
	InsertSysTable(tarsCtx context.Context, req *InsertSysTable_req, res *Response_res) (err error)
	GetSysTableList(tarsCtx context.Context, req *Table_req, res *SysTables_res) (err error)
	GetDBColumnList(tarsCtx context.Context, req *GetDBColumnList_req, res *GetDBColumnList_res) (err error)
	GetDBTableList(tarsCtx context.Context, req *GetDBTableList_req, res *GetDBTableList_res) (err error)
	GetDictDataByDictType(tarsCtx context.Context, dictType string, res *DictData_res) (err error)
	Preview(tarsCtx context.Context, id int32, res *Preview_res) (err error)
	MenuTreeselect(tarsCtx context.Context, res *GetMenuTreeelect_res) (err error)
	Monitor_server(tarsCtx context.Context, res *Monitor_server_res) (err error)
	GetCaptcha(tarsCtx context.Context, res *GetCaptcha_res) (err error)
}

// Dispatch is used to call the server side implemnet for the method defined in the tars file. _withContext shows using context or not.
func (_obj *WebApiNoAuth) Dispatch(tarsCtx context.Context, _val interface{}, tarsReq *requestf.RequestPacket, tarsResp *requestf.ResponsePacket, _withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(tarsReq.SBuffer))
	_os := codec.NewBuffer()
	switch tarsReq.SFuncName {
	case "GetSysTables":
		var tableId string
		var res SysTables_one_res

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&tableId, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("tableId", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&tableId, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["tableId"])
				if err = json.Unmarshal([]byte(_jsonStr_), &tableId); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.GetSysTables(tableId, &res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.GetSysTables(tarsCtx, tableId, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "DeleteSysTables":
		var tableId string
		var res Response_res

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&tableId, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("tableId", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&tableId, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["tableId"])
				if err = json.Unmarshal([]byte(_jsonStr_), &tableId); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.DeleteSysTables(tableId, &res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.DeleteSysTables(tarsCtx, tableId, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "UpdateSysTable":
		var uid string
		var req SysTables_List
		var res Response_res

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&uid, 1, true)
			if err != nil {
				return err
			}

			err = req.ReadBlock(_is, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("uid", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&uid, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("req", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = req.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["uid"])
				if err = json.Unmarshal([]byte(_jsonStr_), &uid); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["req"])
				if err = json.Unmarshal([]byte(_jsonStr_), &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.UpdateSysTable(uid, &req, &res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.UpdateSysTable(tarsCtx, uid, &req, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 3)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "InsertSysTable":
		var req InsertSysTable_req
		var res Response_res

		if tarsReq.IVersion == basef.TARSVERSION {

			err = req.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("req", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = req.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["req"])
				if err = json.Unmarshal([]byte(_jsonStr_), &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.InsertSysTable(&req, &res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.InsertSysTable(tarsCtx, &req, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "GetSysTableList":
		var req Table_req
		var res SysTables_res

		if tarsReq.IVersion == basef.TARSVERSION {

			err = req.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("req", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = req.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["req"])
				if err = json.Unmarshal([]byte(_jsonStr_), &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.GetSysTableList(&req, &res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.GetSysTableList(tarsCtx, &req, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "GetDBColumnList":
		var req GetDBColumnList_req
		var res GetDBColumnList_res

		if tarsReq.IVersion == basef.TARSVERSION {

			err = req.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("req", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = req.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["req"])
				if err = json.Unmarshal([]byte(_jsonStr_), &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.GetDBColumnList(&req, &res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.GetDBColumnList(tarsCtx, &req, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "GetDBTableList":
		var req GetDBTableList_req
		var res GetDBTableList_res

		if tarsReq.IVersion == basef.TARSVERSION {

			err = req.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("req", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = req.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["req"])
				if err = json.Unmarshal([]byte(_jsonStr_), &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.GetDBTableList(&req, &res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.GetDBTableList(tarsCtx, &req, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "GetDictDataByDictType":
		var dictType string
		var res DictData_res

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&dictType, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("dictType", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&dictType, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["dictType"])
				if err = json.Unmarshal([]byte(_jsonStr_), &dictType); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.GetDictDataByDictType(dictType, &res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.GetDictDataByDictType(tarsCtx, dictType, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "Preview":
		var id int32
		var res Preview_res

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&id, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("id", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&id, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["id"])
				if err = json.Unmarshal([]byte(_jsonStr_), &id); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.Preview(id, &res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.Preview(tarsCtx, id, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "MenuTreeselect":
		var res GetMenuTreeelect_res

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.MenuTreeselect(&res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.MenuTreeselect(tarsCtx, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 1)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "Monitor_server":
		var res Monitor_server_res

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.Monitor_server(&res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.Monitor_server(tarsCtx, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 1)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "GetCaptcha":
		var res GetCaptcha_res

		if _withContext == false {
			_imp := _val.(_impWebApiNoAuth)
			err = _imp.GetCaptcha(&res)
		} else {
			_imp := _val.(_impWebApiNoAuthWithContext)
			err = _imp.GetCaptcha(tarsCtx, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = res.WriteBlock(_os, 1)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = res.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(tarsCtx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(tarsCtx)
	if ok && c != nil {
		_context = c
	}
	*tarsResp = requestf.ResponsePacket{
		IVersion:     tarsReq.IVersion,
		CPacketType:  0,
		IRequestId:   tarsReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}

	_ = _is
	_ = _os
	_ = length
	_ = have
	_ = ty
	return nil
}
